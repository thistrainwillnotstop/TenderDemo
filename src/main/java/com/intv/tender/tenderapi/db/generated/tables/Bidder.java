/*
 * This file is generated by jOOQ.
 */
package com.intv.tender.tenderapi.db.generated.tables;


import com.intv.tender.tenderapi.db.generated.Keys;
import com.intv.tender.tenderapi.db.generated.Public;
import com.intv.tender.tenderapi.db.generated.tables.records.BidderRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bidder extends TableImpl<BidderRecord> {

    private static final long serialVersionUID = 649357561;

    /**
     * The reference instance of <code>PUBLIC.BIDDER</code>
     */
    public static final Bidder BIDDER = new Bidder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BidderRecord> getRecordType() {
        return BidderRecord.class;
    }

    /**
     * The column <code>PUBLIC.BIDDER.USER_ID</code>.
     */
    public final TableField<BidderRecord, Integer> USER_ID = createField(DSL.name("USER_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.BIDDER.BIDDER_INFO</code>.
     */
    public final TableField<BidderRecord, String> BIDDER_INFO = createField(DSL.name("BIDDER_INFO"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>PUBLIC.BIDDER</code> table reference
     */
    public Bidder() {
        this(DSL.name("BIDDER"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.BIDDER</code> table reference
     */
    public Bidder(String alias) {
        this(DSL.name(alias), BIDDER);
    }

    /**
     * Create an aliased <code>PUBLIC.BIDDER</code> table reference
     */
    public Bidder(Name alias) {
        this(alias, BIDDER);
    }

    private Bidder(Name alias, Table<BidderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bidder(Name alias, Table<BidderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Bidder(Table<O> child, ForeignKey<O, BidderRecord> key) {
        super(child, key, BIDDER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<BidderRecord> getPrimaryKey() {
        return Keys.PK_BIDDER;
    }

    @Override
    public List<UniqueKey<BidderRecord>> getKeys() {
        return Arrays.<UniqueKey<BidderRecord>>asList(Keys.PK_BIDDER);
    }

    @Override
    public List<ForeignKey<BidderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BidderRecord, ?>>asList(Keys.FK_BIDDER);
    }

    public User user() {
        return new User(this, Keys.FK_BIDDER);
    }

    @Override
    public Bidder as(String alias) {
        return new Bidder(DSL.name(alias), this);
    }

    @Override
    public Bidder as(Name alias) {
        return new Bidder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bidder rename(String name) {
        return new Bidder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bidder rename(Name name) {
        return new Bidder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
