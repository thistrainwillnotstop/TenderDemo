/*
 * This file is generated by jOOQ.
 */
package com.intv.tender.tenderapi.db.generated.tables;


import com.intv.tender.tenderapi.db.generated.Keys;
import com.intv.tender.tenderapi.db.generated.Public;
import com.intv.tender.tenderapi.db.generated.tables.records.TenderOffersRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TenderOffers extends TableImpl<TenderOffersRecord> {

    private static final long serialVersionUID = 969425240;

    /**
     * The reference instance of <code>PUBLIC.TENDER_OFFERS</code>
     */
    public static final TenderOffers TENDER_OFFERS = new TenderOffers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TenderOffersRecord> getRecordType() {
        return TenderOffersRecord.class;
    }

    /**
     * The column <code>PUBLIC.TENDER_OFFERS.ID</code>.
     */
    public final TableField<TenderOffersRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.TENDER_OFFERS.TENDER_ID</code>.
     */
    public final TableField<TenderOffersRecord, Integer> TENDER_ID = createField(DSL.name("TENDER_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TENDER_OFFERS.BIDDER_ID</code>.
     */
    public final TableField<TenderOffersRecord, Integer> BIDDER_ID = createField(DSL.name("BIDDER_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TENDER_OFFERS.OFFER_INFO</code>.
     */
    public final TableField<TenderOffersRecord, String> OFFER_INFO = createField(DSL.name("OFFER_INFO"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.TENDER_OFFERS.STATUS</code>.
     */
    public final TableField<TenderOffersRecord, String> STATUS = createField(DSL.name("STATUS"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'PENDING'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.TENDER_OFFERS.CREATED_AT</code>.
     */
    public final TableField<TenderOffersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(DSL.field("LOCALTIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>PUBLIC.TENDER_OFFERS</code> table reference
     */
    public TenderOffers() {
        this(DSL.name("TENDER_OFFERS"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.TENDER_OFFERS</code> table reference
     */
    public TenderOffers(String alias) {
        this(DSL.name(alias), TENDER_OFFERS);
    }

    /**
     * Create an aliased <code>PUBLIC.TENDER_OFFERS</code> table reference
     */
    public TenderOffers(Name alias) {
        this(alias, TENDER_OFFERS);
    }

    private TenderOffers(Name alias, Table<TenderOffersRecord> aliased) {
        this(alias, aliased, null);
    }

    private TenderOffers(Name alias, Table<TenderOffersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TenderOffers(Table<O> child, ForeignKey<O, TenderOffersRecord> key) {
        super(child, key, TENDER_OFFERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TenderOffersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TENDER_OFFERS;
    }

    @Override
    public UniqueKey<TenderOffersRecord> getPrimaryKey() {
        return Keys.PK_TENDER_OFFERS;
    }

    @Override
    public List<UniqueKey<TenderOffersRecord>> getKeys() {
        return Arrays.<UniqueKey<TenderOffersRecord>>asList(Keys.PK_TENDER_OFFERS);
    }

    @Override
    public List<ForeignKey<TenderOffersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TenderOffersRecord, ?>>asList(Keys.FK_TENDER_ID, Keys.FK_BIDDER_ID);
    }

    public Tender tender() {
        return new Tender(this, Keys.FK_TENDER_ID);
    }

    public Bidder bidder() {
        return new Bidder(this, Keys.FK_BIDDER_ID);
    }

    @Override
    public TenderOffers as(String alias) {
        return new TenderOffers(DSL.name(alias), this);
    }

    @Override
    public TenderOffers as(Name alias) {
        return new TenderOffers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TenderOffers rename(String name) {
        return new TenderOffers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TenderOffers rename(Name name) {
        return new TenderOffers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
