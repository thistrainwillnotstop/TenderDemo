/*
 * This file is generated by jOOQ.
 */
package com.intv.tender.tenderapi.db.generated.tables;


import com.intv.tender.tenderapi.db.generated.Keys;
import com.intv.tender.tenderapi.db.generated.Public;
import com.intv.tender.tenderapi.db.generated.tables.records.IssuerRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Issuer extends TableImpl<IssuerRecord> {

    private static final long serialVersionUID = -1914161088;

    /**
     * The reference instance of <code>PUBLIC.ISSUER</code>
     */
    public static final Issuer ISSUER = new Issuer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IssuerRecord> getRecordType() {
        return IssuerRecord.class;
    }

    /**
     * The column <code>PUBLIC.ISSUER.USER_ID</code>.
     */
    public final TableField<IssuerRecord, Integer> USER_ID = createField(DSL.name("USER_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ISSUER.ISSUER_INFO</code>.
     */
    public final TableField<IssuerRecord, String> ISSUER_INFO = createField(DSL.name("ISSUER_INFO"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>PUBLIC.ISSUER</code> table reference
     */
    public Issuer() {
        this(DSL.name("ISSUER"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ISSUER</code> table reference
     */
    public Issuer(String alias) {
        this(DSL.name(alias), ISSUER);
    }

    /**
     * Create an aliased <code>PUBLIC.ISSUER</code> table reference
     */
    public Issuer(Name alias) {
        this(alias, ISSUER);
    }

    private Issuer(Name alias, Table<IssuerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Issuer(Name alias, Table<IssuerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Issuer(Table<O> child, ForeignKey<O, IssuerRecord> key) {
        super(child, key, ISSUER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<IssuerRecord> getPrimaryKey() {
        return Keys.PK_ISSUER;
    }

    @Override
    public List<UniqueKey<IssuerRecord>> getKeys() {
        return Arrays.<UniqueKey<IssuerRecord>>asList(Keys.PK_ISSUER);
    }

    @Override
    public List<ForeignKey<IssuerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IssuerRecord, ?>>asList(Keys.FK_ISSUER);
    }

    public User user() {
        return new User(this, Keys.FK_ISSUER);
    }

    @Override
    public Issuer as(String alias) {
        return new Issuer(DSL.name(alias), this);
    }

    @Override
    public Issuer as(Name alias) {
        return new Issuer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Issuer rename(String name) {
        return new Issuer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Issuer rename(Name name) {
        return new Issuer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
